
buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
		classpath 'org.ajoberstar:gradle-git:1.3.2'
	}
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.gradle.plugins.ide.eclipse.model.SourceFolder
import org.ajoberstar.grgit.Grgit

apply plugin: 'org.ajoberstar.grgit'

def repo = Grgit.open(project.file('.'))
def describe = repo.describe()
if(!hasProperty('latest') && describe && describe.startsWith('v')) {
	version = describe.substring(1)
} else {
	version = 'latest'
}

subprojects {

	version = rootProject.version
	group = 'nl.idgis.downloadtool'
	
	repositories {
		maven {
			name = "geotoolkit"
			url "http://maven.geotoolkit.org/"
		}
		mavenCentral()
	}
}

// java projects
configure([
	project(':dao'),
	project(':domain'),
	project(':queue'),
	project(':feedback'),
	project(':downloader')]) {
	
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	sourceSets {
		integration {
			java {
				srcDir file('src/integration/java')
			}
			
			resources {
				srcDir file('src/integration/resources')
			}
			
			compileClasspath = sourceSets.main.output + configurations.integrationCompile
			runtimeClasspath = output + compileClasspath
		}
	}
	
	configurations {
		integrationCompile {
			extendsFrom compile, testCompile
		}
	}
	
	task integrationTest(type: Test, group: 'Verification', description: 'Runs the integration tests.') {
		testClassesDir = sourceSets.integration.output.classesDir
		classpath = sourceSets.integration.runtimeClasspath
	}

	
	dependencies {
		compile 'org.slf4j:slf4j-api:1.7.14'
		compile 'org.slf4j:slf4j-log4j12:1.7.14'
		
		testCompile 'junit:junit:4.12'
		testCompile 'org.easymock:easymock:3.4'
	}
	
	jar {
		manifest {
			attributes("Implementation-Title": project.name)
			if(project.version) {
				attributes("Implementation-Version": project.version)
			}
		}
	}
}	

// play projects
project(':web') {
	
	apply plugin: 'java-base'
	apply plugin: 'play'
	apply plugin: DockerRemoteConfig
	apply plugin: 'eclipse'
	
	repositories {
		maven {
			name "typesafe-maven-release"
			url "https://repo.typesafe.com/typesafe/maven-releases"
		}
		ivy {
			name "typesafe-ivy-release"
			url "https://repo.typesafe.com/typesafe/ivy-releases"
			layout "ivy"
		}
		mavenCentral()
	}
	
	model {
		components {
			play {
				platform play: '2.4.6', scala: '2.11', java: '1.8'
				injectedRoutesGenerator = true
				
				sources {
					twirlTemplates {
						defaultImports = TwirlImports.JAVA
					}
				}
			}
		}
		
		tasks {
			copyRootCA(Copy) {
				from '../docker/rootCA.crt'
				into "${project.buildDir}/docker"
			}
			
			copyTar(Copy) {
				dependsOn createPlayBinaryTarDist
				from tarTree("${project.buildDir}/distributions/playBinary.tar")
				into "${project.buildDir}/docker"
			}
			
			createDockerfile(Dockerfile) {
				dependsOn copyTar
				destFile = project.file('build/docker/Dockerfile')
				from 'azul/zulu-openjdk:8'
				copyFile 'playBinary', '/opt'
				runCommand 'chmod u+x /opt/bin/playBinary'
				if(project.hasProperty('importRootCA')) {
					copyFile 'rootCA.crt', '/opt'
					runCommand 'keytool -import -alias server -keystore /usr/lib/jvm/zulu8-ca-amd64/jre/lib/security/cacerts -file /opt/rootCA.crt -storepass changeit -noprompt'
				}
				exposePort 9000
				defaultCommand "/opt/bin/playBinary"
			}
			
			buildImage(DockerBuildImage) {
				dependsOn createDockerfile
				if(project.hasProperty('importRootCA')) {
					dependsOn copyRootCA
				}
				inputDir = project.file('build/docker')
				tag = "idgis/${rootProject.name}_${project.name}:${project.version}"
			}
		}
		
		distributions {
			playBinary {
				tasks.withType(org.gradle.jvm.tasks.Jar) {
					manifest {
						attributes("Implementation-Title": project.name)
						if(project.version) {
							attributes("Implementation-Version": project.version)
						}
					}
				}
			}
		}
	}

	eclipse {
		classpath {
			plusConfigurations += [ configurations.play ]
			plusConfigurations += [ configurations.playTest ]

			file {
				beforeMerged { classpath ->
					classpath.entries += [
					new SourceFolder("app", null)]
				}
			}
		}
	}
	
	dependencies {
		play 'org.webjars:webjars-play_2.11:2.4.0-2'
		play 'com.typesafe.play:play-java-ws_2.11:2.4.6'
		play 'com.typesafe.play:play-java-jdbc_2.11:2.4.6'
	}
}

// application projects
configure([
	project(':feedback'),
	project(':downloader')]) {
	
	apply plugin: 'application'
	apply plugin: DockerRemoteConfig
	
	dependencies {
		compile project(':dao')
		compile project(':domain')
		compile project(':queue')
	}
	
	task copyRootCA(type: Copy) {
		from '../docker/rootCA.crt'
		into "${project.buildDir}/docker"
	}
			
	task copyTar(type: Copy) {
		dependsOn distTar
		from tarTree(distTar.archivePath)
		into "${project.buildDir}/docker"
	}

	task createDockerfile(type: Dockerfile) {
		dependsOn copyTar
		destFile = project.file('build/docker/Dockerfile')
		from 'azul/zulu-openjdk:8'
		copyFile "${project.name}-${project.version}", '/opt'
		runCommand "chmod u+x /opt/bin/${project.name}"
		if(project.hasProperty('importRootCA')) {
			copyFile 'rootCA.crt', '/opt'
			runCommand 'keytool -import -alias server -keystore /usr/lib/jvm/zulu8-ca-amd64/jre/lib/security/cacerts -file /opt/rootCA.crt -storepass changeit -noprompt'
		}
		defaultCommand "/opt/bin/${project.name}"
	}

	task buildImage(type: DockerBuildImage) {
		dependsOn createDockerfile
		if(project.hasProperty('importRootCA')) {
			dependsOn copyRootCA
		}
		inputDir = project.file('build/docker')
		tag = "idgis/${rootProject.name}_${project.name}:${project.version}"
	}
}

// configure docker plugin
allprojects {
	afterEvaluate { project ->
		if(project.plugins.hasPlugin(DockerRemoteConfig)) {
			def env = System.env
			project.docker {
				if(env.containsKey('DOCKER_HOST')) {
					url = "$env.DOCKER_HOST"
					
					if(env.containsKey('DOCKER_TLS_VERIFY')) {
						url = url.replace('tcp', 'https')
					} else {
						url = url.replace('tcp', 'http')
					}
					
					if(env.containsKey('DOCKER_CERT_PATH')) {
						certPath = file "$env.DOCKER_CERT_PATH"
					}
				} else {
					if (project.properties.containsKey("dockerHost")) {
						url = "http://${dockerHost}:2375"
					}
				}
			}
		}
	}
}

project('web') {
	dependencies {
		play project(':domain')
		play project(':dao')
		play project(':queue')
		play 'org.webjars:bootstrap:3.3.6'
		play ("nl.idgis.sys:provisioning-registration:1.1.3-SNAPSHOT") {
			exclude module: "ch.qos.logback"
			exclude module: "logback-classic"
		}
		
		play 'org.springframework:spring-jdbc:4.2.5.RELEASE'
	}
}

project(':dao') {
	dependencies {
		compile project(':domain')
		compile 'nl.idgis.commons:commons-utils:0.0.14'
		compile 'org.postgresql:postgresql:9.4.1208.jre7'
		compile 'com.google.code.gson:gson:2.5'
	}
}

project(':queue') {
	dependencies {
		compile project(':domain')
		compile 'com.google.code.gson:gson:2.5'
		compile 'com.dinstone:beanstalkc:2.2.0'
	}
}

project(':feedback') {

	dependencies {		
		compile 'nl.idgis.commons:commons-utils:0.0.14'	
		compile 'org.springframework:spring-jdbc:3.2.2.RELEASE'
	}

	mainClassName = 'nl.idgis.downloadtool.feedback.FeedbackProvider'
}

project(':downloader') {

	dependencies {
		compile 'org.apache.httpcomponents:httpclient:4.3.1'
		compile 'nl.idgis.commons:commons-cache:0.0.14'
		compile 'nl.idgis.commons:commons-convert:0.0.14'
		compile 'nl.idgis.commons:commons-utils:0.0.14'
	}

	mainClassName = 'nl.idgis.downloadtool.downloader.DownloadProcessor'
}

defaultTasks 'clean', 'build', 'buildImage'
