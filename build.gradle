
buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
	}
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.gradle.plugins.ide.eclipse.model.SourceFolder

subprojects {
	
	group = 'nl.idgis.downloadtool'
	
	repositories {
		maven {
			name = "geotoolkit"
			url "http://maven.geotoolkit.org/"
		}
		mavenCentral()
		maven {
			name "idgis-public"
			url "http://nexus.idgis.eu/content/groups/public/"
			credentials {
				username nexusUser 
				password nexusPassword
			}
		}
		maven {
			name "idgis-restricted"
			url "http://nexus.idgis.eu/content/groups/restricted/"
			credentials {
				username nexusUser 
				password nexusPassword
			}
		}
	}
}

// java projects
configure([
	project(':dao'),
	project(':domain'),
	project(':queue'),
	project(':request'),
	project(':feedback'),
	project(':downloader')]) {
	
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	dependencies {
		compile 'org.slf4j:slf4j-api:1.7.14'
		compile 'org.slf4j:slf4j-log4j12:1.7.14'
		
		testCompile 'junit:junit:4.12'
		testCompile 'org.easymock:easymock:3.4'
	}
}	

// play projects
configure([
	project(':web')]) {
	
	apply plugin: 'java-base'
	apply plugin: 'play'
	apply plugin: 'com.bmuschko.docker-remote-api'
	apply plugin: 'eclipse'
	
	repositories {
		jcenter()
		maven {
			name "typesafe-maven-release"
			url "https://repo.typesafe.com/typesafe/maven-releases"
		}
		ivy {
			name "typesafe-ivy-release"
			url "https://repo.typesafe.com/typesafe/ivy-releases"
			layout "ivy"
		}
	}
	
	model {
		components {
			play {
				platform play: '2.4.6', scala: '2.11', java: '1.8'
				injectedRoutesGenerator = true
				
				sources {
					twirlTemplates {
						defaultImports = TwirlImports.JAVA
					}
				}
			}
		}
		
		tasks {
			copyTar(Copy) {
				dependsOn createPlayBinaryTarDist
				from "${project.buildDir}/distributions/playBinary.tar"
				into "${project.buildDir}/docker"
			}
			
			createDockerfile(Dockerfile) {
				dependsOn copyTar
				destFile = project.file('build/docker/Dockerfile')
				from 'java'
				copyFile "playBinary.tar", '/opt'
				runCommand "cd /opt; tar -xvf playBinary.tar; rm playBinary.tar; chmod u+x playBinary/bin/playBinary"
				exposePort 9000
				defaultCommand "/opt/playBinary/bin/playBinary"
			}
			
			buildImage(DockerBuildImage) {
				dependsOn createDockerfile
				inputDir = project.file('build/docker')
				tag = "${project.name}"
			}
		}
	}
	
	eclipse {
		classpath {
			plusConfigurations += [ configurations.play ]
			plusConfigurations += [ configurations.playTest ]

			file {
				beforeMerged { classpath ->
					classpath.entries += [
					new SourceFolder("app", null)]
				}
			}
		}
	}
	
	dependencies {
		play 'org.webjars:webjars-play_2.11:2.4.0-2'
		play 'com.typesafe.play:play-java-ws_2.11:2.4.6'
		play 'com.typesafe.play:play-java-jdbc_2.11:2.4.6'
	}
}

// application projects
configure([
	project(':request'),
	project(':feedback'),
	project(':downloader')]) {
	
	apply plugin: 'application'
	apply plugin: 'com.bmuschko.docker-remote-api'
	
	dependencies {
		compile project(':dao')
		compile project(':domain')
		compile project(':queue')
	}
	
	task copyTar(type: Copy) {
		dependsOn distTar
		from "${project.buildDir}/distributions/${project.name}.tar"
		into "${project.buildDir}/docker"
	}

	task createDockerfile(type: Dockerfile) {
		dependsOn copyTar
		destFile = project.file('build/docker/Dockerfile')
		from 'java'
		copyFile "${project.name}.tar", '/opt'
		runCommand "cd /opt; tar -xvf ${project.name}.tar; rm ${project.name}.tar; chmod u+x ${project.name}/bin/${project.name}"
		defaultCommand "/opt/${project.name}/bin/${project.name}"
	}

	task buildImage(type: DockerBuildImage) {
		dependsOn createDockerfile
		inputDir = project.file('build/docker')
		tag = "${project.name}"
	}
}

// configure docker plugin
allprojects {
	afterEvaluate { project ->
		if(project.plugins.hasPlugin('com.bmuschko.docker-remote-api')) {
			project.docker {
				url = "http://${dockerHost}:2375"
			}
		}
	}
}

project('web') {
	dependencies {
		play project(':domain')
		play project(':dao')
		play project(':queue')
		play project(':dao')
		play 'org.webjars:bootstrap:3.3.6'
		play 'nl.idgis.geoportaal:md-stylesheets:1.0.7'
		play ("nl.idgis.sys:provisioning-registration:1.1.3-SNAPSHOT") {
			exclude module: "ch.qos.logback"
			exclude module: "logback-classic"
		}
	}
}

project(':dao') {
	dependencies {
		compile project(':domain')
		compile 'nl.idgis.commons:commons-utils:0.0.14'
		compile 'org.postgresql:postgresql:9.4.1208.jre7'
		compile 'com.google.code.gson:gson:2.5'
	}
}

project(':queue') {
	dependencies {
		compile project(':domain')
		compile 'com.google.code.gson:gson:2.5'
		compile 'com.dinstone:beanstalkc:2.2.0'
	}
}

project(':request') {
	
	mainClassName = 'nl.idgis.downloadtool.downloadrequest.DownloadRequestController'
	
	dependencies {
		compile 'org.springframework:spring-jdbc:3.2.2.RELEASE'
	}
}

project(':feedback') {

	dependencies {		
		compile 'nl.idgis.commons:commons-utils:0.0.14'	
		compile 'org.springframework:spring-jdbc:3.2.2.RELEASE'
	}

	mainClassName = 'nl.idgis.downloadtool.feedback.FeedbackProvider'
}

project(':downloader') {

	dependencies {
		compile 'org.apache.httpcomponents:httpclient:4.3.1'
		compile 'nl.idgis.commons:commons-cache:0.0.14'
		compile 'nl.idgis.commons:commons-convert:0.0.14'
		compile 'nl.idgis.commons:commons-utils:0.0.14'
	}

	mainClassName = 'nl.idgis.downloadtool.downloader.DownloadProcessor'
}

defaultTasks 'clean', 'build', 'buildImage'
